# Введение

# Обзор подходов к управлению вычислительными эффектами и построению монадических парсеров

  ## Вычисления с побочными эффектами

  ## Сравнение трансформеров монад и расширяемых эффектов

    ### Трансформеры монад 

    ### Расширяемые эффекты 

    ### Резюме

  ## Монадические функциональные парсеры 

    ### Сравнение Parsec vs. attoparsec

  ## Выбор средств реализации практической части

# Основная часть

  ## Теоретические основы функционального программирования и элементы теории категорий

  ## Реализация библиотек функциональных парсеров на основе трансформеров монад 
  и расширяемых эффектов. Парсер языка Markdown.

  ### 

# Заключение

Список литературы

\subsection{Пример практического использования}

    В этом подразделе будет рассмотрена системная утилита,
    написанная с использованием библиотеки \lstinline{Extensible Effects}.
    Задача этой утилиты --- отслеживание изменений содержимого некоторой директории
    и выполнение заданных сценариев командной оболочки в качестве реакции на эти
    изменения. Git-репозиторий с исходным кодом на языке \lstinline{Haskell}
    доступен по адресу~\cite{fileTrigger}.

    На этапе проектирования приложения необходимо определить, какие вычислительные
    эффекты будут им порождаться. Рассматриваемая утилита будет работать с файловой
    системой, значит потребуется эффект \lstinline{IO}, иметь внутреннее
    состояние --- необходим эффект \lstinline{State}, а также будет иметь
    конфигурационную информацию --- потребуется эффект \lstinline{Reader}.

    \begin{figure}[t]
    \begin{lstlisting}
    loop :: ( Member (Reader AppConfig) r
            , Member (State AppState)   r
            , SetMember Lift (Lift IO)  r
            ) => Eff r ()
    loop = do
      cfg <- ask
      currentFilesList <- lift $ getFilesInfo $ directory cfg
      handleCreate currentFilesList
      lift $ threadDelay $ refreshRate cfg
      curTime <- lift getCurrentTime
      put $ (AppState currentFilesList curTime)
      loop
    \end{lstlisting}
    \caption{Главный цикл приложения}
    \label{listing:ftMainLoop}
    \end{figure}

    В листинге~\ref{listing:ftMainLoop} представлена упрощённая функция главного
    цикла программы, типовая аннотация отражает наличие в результирующем наборе
    эффектов \lstinline{r} трёх составляющих: \lstinline{Reader}, \lstinline{State}
    и \lstinline{IO}.

    Как уже говорилось ранее, порядок на наборе эффектов устанавливается в момент
    запуска вычисления, для чего служит функция из листинга~\ref{listing:ftRun}.

    \begin{figure}[t]
    \begin{lstlisting}
    runApp action cfg initState =
      runLift . runState initState . runReader action $ cfg
    \end{lstlisting}
    \caption{Обработка эффектов и запуск приложения}
    \label{listing:ftRun}
    \end{figure}